name: Build & Deploy CI/CD

on:
  push:
    branches: [main]

jobs:
  build:
    name: Build's
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Enable Corepack and prepare pnpm
        run: |
          corepack enable
          corepack prepare pnpm@10.10.0 --activate

      - name: Install dependencies
        run: pnpm install

      - name: Build server
        run: pnpm --filter @workspace/server... run build

      - name: Build frontend
        run: pnpm --filter @workspace/storefront... run build

  deploy-server:
    name: Deploy Server to Droplet
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            set -e
            echo "--- Navigating to project directory ---"
            cd $HOME/tantovale

            echo "--- Pulling latest changes from Git ---"
            git pull origin main

            echo "--- Setting up Node.js environment ---"
            # Check if node is already available
            if command -v node &> /dev/null; then
                echo "Node.js already available: $(node --version)"
            else
                echo "Node.js not in PATH, checking for version managers..."
                
                # Check for nvm
                if [ -f "$HOME/.nvm/nvm.sh" ]; then
                    echo "Found nvm, loading it..."
                    source "$HOME/.nvm/nvm.sh"
                    nvm use default 2>/dev/null || nvm use node 2>/dev/null || echo "No default node version set in nvm"
                # Check for fnm
                elif [ -f "$HOME/.local/share/fnm/fnm" ] || command -v fnm &> /dev/null; then
                    echo "Found fnm, loading it..."
                    eval "$(fnm env --use-on-cd)"
                    fnm use default 2>/dev/null || echo "No default node version set in fnm"
                else
                    echo "No version manager found. Installing Node.js via NodeSource repository..."
                    curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
                    sudo apt-get install -y nodejs
                fi
                
                # Verify node is now available
                if command -v node &> /dev/null; then
                    echo "Node.js is now available: $(node --version)"
                else
                    echo "Failed to make Node.js available"
                    exit 1
                fi
            fi

            echo "--- Setting up pnpm via corepack ---"
            corepack enable
            corepack prepare pnpm@10.10.0 --activate

            echo "--- Installing dependencies ---"
            # Set Node.js memory limit to prevent OOM
            export NODE_OPTIONS="--max-old-space-size=768"

            # Clear any existing cache
            pnpm store prune || echo "No store to prune"

            # Install with memory-efficient options
            pnpm install --prefer-offline --no-optional --ignore-scripts

            # Run install scripts separately if needed
            pnpm rebuild || echo "No rebuild needed"

            echo "--- Building server ---"
            # Set memory limit for build process
            export NODE_OPTIONS="--max-old-space-size=512"

            if pnpm --filter @workspace/server... run build; then
              echo "Build successful. Restarting application..."
              pm2 restart server
            else
              echo "Build failed. Server will not be restarted."
              exit 1
            fi

  deploy-frontend:
    name: Deploy Frontend to Vercel
    needs: [deploy-server]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Enable Corepack and prepare pnpm
        run: |
          corepack enable
          corepack prepare pnpm@10.10.0 --activate

      - name: Install dependencies
        run: pnpm install

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        working-directory: .
        run: pnpm dlx vercel --prod --yes --token $VERCEL_TOKEN
